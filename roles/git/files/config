[user]
	name = Marwan Mustafa Fikrat
	email = marwan.mm@live.com

[diff]
	tool = vimdiff

[difftool]
	prompt = false

[alias]
	a    = add
	f    = fetch
	ai   = !nvim -c 'Gstatus | wincmd o' .
	au   = add -u
	br   = branch --format='%(color: bold green)%(align:2,left)%(HEAD)%(end)%(color:reset)%(align:10,left)%(refname:strip=2)%(end) -> %(color:blue)%(upstream:strip=2) %(color:cyan)%(upstream:track)'
	bd   = branch -D
	cam  = commit --amend
	cap  = !git ca && git publish
	ci   = commit
	cij  = !sh -c 'export GIT_ADD_JIRA=1 && git commit $@'
	ca   = commit --amend --no-edit
	caj  = !sh -c 'export GIT_ADD_JIRA=1 && git commit --amend --no-edit $@'
	co   = checkout
	cp   = cherry-pick
	cpc  = cherry-pick --continue
	d    = diff --ignore-submodules
	ciff = diff --cached
	drop = !sh -c 'git stash && git reset --hard HEAD~${1-1}' -
	r    = rebase
	ra   = rebase --abort
	rc   = rebase --continue
	ri   = rebase --interactive
	rs   = rebase --skip
	sp   = stash show -p
	pop  = stash pop
	lgs = lg origin...
	sub = submodule
	new = "!f() {\
		    set -e; \
			branch=$(git rev-parse --abbrev-ref HEAD); \
			remoteBranch=$(git config branch.$branch.merge); \
			remote=$(git config branch.$branch.remote); \
			remoteBranch=${remoteBranch##refs/heads/}; \
			git branch -f ${1-master} $remote/$remoteBranch; \
			git checkout ${1-master}; \
			git track ${2-$remoteBranch}; \
		}; f"
	reh = reset --hard
	track = !sh -c 'git branch --set-upstream-to origin/${1-master}' -
	untrack = branch --unset-upstream
	who = shortlog --summary --numbered
	who2 = shortlog --summary --numbered --since=2year
	p = publish

	undo = "!f() { \
			git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; \
		}; f"

	draft = "!f() {\
			set -e; \
			branch=$(git rev-parse --abbrev-ref HEAD); \
			remoteBranch=$(git config branch.$branch.merge); \
			remoteBranch=${remoteBranch##refs/heads/}; \
			git push origin HEAD:refs/drafts/${1-$remoteBranch}; \
		}; f"

	fix-fetch = config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

	# Get the latest patchset for a given change number it checkout to a local
	# branch
	# $1: change number
	# $2: (optional) branch name, defaults to $1
	setup-hooks = !sh -c 'cp -r $HOME/git-templates/* $(git rev-parse --git-dir)/' -
	; setup-hooks = !sh -c 'scp -p $1:hooks/commit-msg ${2}/.git/hooks/' -

	rg = -c color.grep.linenumber=\"bold yellow\" \
		-c color.grep.filename=\"bold cyan\" \
		-c color.grep.match=\"reverse yellow\" \
		grep --break --heading --line-number

    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "

[core]
	commitGraph  = true
	editor       = nvim
	excludesfile = ~/.gitignore
	pager = delta

[commit]
	template = "~/.config/git/.gitmessage"

[pull]
	rebase = true

[push]
	default = upstream

[rebase]
	autoStash = true

[fetch]
	prune = true

[color "diff-highlight"]
	oldNormal    = red   bold
	oldHighlight = red   bold 52
	newNormal    = green bold
	newHighlight = green bold 22

[color "diff"]
	meta       = yellow
	frag       = magenta bold
	commit     = yellow  bold
	old        = red     bold
	new        = green   bold
	whitespace = red     reverse

[log]
	date = short

[delta]
    line-numbers = true

[credential]
	helper = /mnt/d/webdev/Git/mingw64/libexec/git-core/git-credential-manager-core.exe
